<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>为什么等价无穷小不能在加减法中使用</title>
    <link href="/2021/03/03/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8D%E8%83%BD%E5%9C%A8%E5%8A%A0%E5%87%8F%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8%EF%BC%9F/"/>
    <url>/2021/03/03/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8D%E8%83%BD%E5%9C%A8%E5%8A%A0%E5%87%8F%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>首先明确一点，<strong>这句话是并不是完全正确的</strong>，所谓不能在加减法中使用，只是因为在加减法中比较容易出错，而乘除法中不会出错，所以我们应该尽量做到不在加减法中使用等价无穷小的替换。</p><h3 id="为什么加减法不行"><a href="#为什么加减法不行" class="headerlink" title="为什么加减法不行"></a>为什么加减法不行</h3><p>看这样一道题使用等价无穷小解：</p><script type="math/tex; mode=display">\lim_{x\rightarrow0}\frac{x-\sin x}{x^3}\xlongequal{x\rightarrow 0,x\sim\sin x}\lim_{x\rightarrow0}\frac{x-x}{x^3}=\lim_{x\rightarrow0}\frac{0}{x^3}=0</script><p>这个结果明显是错误的，我们使用洛必达得到正解：</p><script type="math/tex; mode=display">\lim_{x\rightarrow0}\frac{x-\sin x}{x^3}\xlongequal{\frac00}\lim_{x\rightarrow0}\frac{1-\cos x}{3x^2}\xlongequal{\frac00}\lim_{x\rightarrow0}\frac{\sin x}{6x}\xlongequal{\frac00}\lim_{x\rightarrow0}\frac{\cos x}{6}=\frac16</script><p>那为什么会发生错误？原因是等价无穷小的本质是泰勒展开，在这道题中，<strong>佩亚诺余项对结果产生了影响</strong>。</p><p>对此题如果将$\sin x$展开到第一项后，是这样的：</p><script type="math/tex; mode=display">\lim_{x\rightarrow0}\frac{x-\sin x}{x^3}=\lim_{x\rightarrow0}\frac{x-x+o(x)}{x^3}=\lim_{x\rightarrow0}\frac{o(x)}{x^3}</script><p>这里的佩亚诺余项$o(x)$是$x$的高阶无穷小，但是无法和$x^3$进行比较，因此到这里就无法计算了。而如果将$\sin x$展开到第二项就可以得到正确结果：</p><script type="math/tex; mode=display">\lim_{x\rightarrow0}\frac{x-\sin x}{x^3}=\lim_{x\rightarrow0}\frac{x-x+\frac16x^3+o(x^3)}{x^3}=\lim_{x\rightarrow0}\frac{\frac16x^3+o(x^3)}{x^3}=\frac16</script><script type="math/tex; mode=display">\text{其中}o(x^3)\text{是}x^3\text{的高阶无穷小，因此}\lim_{x\rightarrow0}\frac{o(x^3)}{x^3}=0</script><p>这就是使用泰勒展开的“上下同阶”原则。如果这道题的分母是$x$，那么使用等价无穷小得到结果为0就是正确的。</p><p>到这里，我们解释了加减法使用等价无穷小有时正确有时错误的原因，下面看看为什么乘除法使用等价无穷小不会出错。</p><h3 id="为什么乘除法可以"><a href="#为什么乘除法可以" class="headerlink" title="为什么乘除法可以"></a>为什么乘除法可以</h3><p>等价无穷小替换的过程实际可以看作是这样的：</p><script type="math/tex; mode=display">\begin{align*}\lim_{x\rightarrow0}\frac{x-\sin x}{x\sin x}&=(\lim_{x\rightarrow0}\frac{x-\sin x}{x\sin x})\cdot1=\lim_{x\rightarrow0}\frac{x-\sin x}{x\sin x}\cdot\lim_{x\rightarrow0}\frac{\sin x}{x}\\&=\lim_{x\rightarrow0}(\frac{x-\sin x}{x\sin x}\cdot\frac{\sin x}{x})=\lim_{x\rightarrow0}\frac{x-\sin x}{x^2}=\cdots\end{align*}</script><p>这是一个抵消的过程，原式分母和极限为0的分式的分子约分，完成替换。因此乘除法是不会出错的。</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>等价无穷小</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络课程设计-Socket网络通信(C++, MacOS)</title>
    <link href="/2021/01/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-Socket%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1(C++,%20MacOS)/"/>
    <url>/2021/01/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-Socket%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1(C++,%20MacOS)/</url>
    
    <content type="html"><![CDATA[<h3 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h3><p>利用Socket实现双机通信</p><h3 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h3><p>利用Socket编程，采用其中的TCP面向连接方式，实现计算机数据的交换</p><h3 id="具体要求："><a href="#具体要求：" class="headerlink" title="具体要求："></a>具体要求：</h3><ol><li>操作系统：可在Linux或Windows操作系统下实现</li><li>编程语言：C或C++，若使用Java、python等更高级的语言或脚本语言则须实现下面的“扩展功能”</li><li>界面要求：图形界面或者命令行界面均可</li><li>连接方式：局域网内通信，有线或无线网络均可</li><li>实现功能：<ul><li>基本功能（必做）：计算机A、B（须为不同的物理机）实现文本通信，即B收到A所发送的文本并显示。</li><li>扩展功能（加分选做）：双向通信（同一程序下，A、B既可以发送数据又可以接受数据）；文本传输（B完整收到A发送的文件并保存）；实现音视频传输（类似于QQ电话）；其他网络拓展功能</li></ul></li><li>验收方式等不再赘述<h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3>基于C++和MacOS的实现，unix上可以正常运行，linux好像有库不支持。有关Socket的基础知识见博客<a href="https://blog.csdn.net/weixin_43347376/article/details/105887260">网络socket编程指南</a>，下面代码中要实现的内容有：</li><li>基本文本双向通信，多对多双向通信，实现私聊和群聊功能</li><li>文件双向传输，多对多双向传送，实现私传和群传功能</li></ol><p>题目要求使用TCP方式，因此应该使用流式套接字。代码使用127.0.0.1测试成功，一主机对一虚拟机也测试成功了，尚未进行多台电脑之间的测试（<del>疫情在家，买不起多台电脑</del>）。</p><p>由于没有设计GUI，我们需要对客户端的输入格式进行规范化，如下所示：</p><p>首先输入聊天对象：<br><code>1 ID</code>表示私聊客户端ID，<code>2</code>表示进入群聊，向包括服务端的所有人发送信息。</p><p>选择聊天对象后：<br><code>1 文本</code>表示发送文本信息，<code>2 PATH</code>表示将PATH路径上的文件发送过去，<code>3</code>表示开始视频通话（此功能尚未实现）。之后的聊天不需要输入聊天对象，默认是与此人聊天。</p><p>键入<code>\exit</code>表示退出与此人的聊天，下次需要重新输入聊天对象。</p><p>键入<code>\quit</code>表示退出与服务器的连接。</p><p>服务端可以对群体进行文件传输和文本发送，和上面相同，<code>1 文本</code>表示发送文本信息，<code>2 PATH</code>表示将PATH路径上的文件发送过去，<code>3</code>表示开始视频通话（此功能尚未实现）。</p><p>暂时没有实现任意多个人之间进行聊天。代码有些杂乱，并且或多或少可能有一些bug，但是可以正常运行。我尽量抽时间整理，见谅。</p><h3 id="运行界面"><a href="#运行界面" class="headerlink" title="运行界面"></a>运行界面</h3><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p><img src="https://img-blog.csdnimg.cn/20200531200901294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0NzM3Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="客户端1"><a href="#客户端1" class="headerlink" title="客户端1"></a>客户端1</h5><p><img src="https://img-blog.csdnimg.cn/20200531200919339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0NzM3Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="客户端2"><a href="#客户端2" class="headerlink" title="客户端2"></a>客户端2</h5><p><img src="https://img-blog.csdnimg.cn/20200531200938507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0NzM3Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h5 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> BACKLOG=<span class="hljs-number">2</span>; <span class="hljs-comment">//完成三次握手但没有accept的队列的长度</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> CONCURRENT_MAX=<span class="hljs-number">3</span>; <span class="hljs-comment">//应用层同时可以处理的连接</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> BUFFER_SIZE=<span class="hljs-number">1024</span>;<span class="hljs-comment">//将被加入缓存器的最大字节数</span><br><span class="hljs-keyword">char</span> input_msg[BUFFER_SIZE];<br><span class="hljs-keyword">char</span> recv_msg[BUFFER_SIZE];<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Socket_server</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Socket_server()&#123;<br>        server_sock_fd=<span class="hljs-number">0</span>;<br>        tv.tv_sec = <span class="hljs-number">20</span>;<span class="hljs-comment">//秒</span><br>        tv.tv_usec = <span class="hljs-number">0</span>;<span class="hljs-comment">//微秒</span><br>        max_fd=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">memset</span>(client_fds,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(client_fds));<br>        <span class="hljs-built_in">memset</span>(client_to,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(client_to));<br>        filename.clear(); path.clear();<br>    &#125;;<br>    ~Socket_server()&#123;<br><br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> port)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">sendmessage</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//服务器发出信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">sendIP</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>;<span class="hljs-comment">//发送号码表</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recv_and_forward</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//接收信息，同时起到中转站的作用</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recv_word</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span> byte_num)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recv_file</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span> byte_num)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recv_video</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept_new</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> server_sock_fd;<span class="hljs-comment">//服务端套接字</span><br>    <span class="hljs-comment">//fd_set</span><br>    fd_set server_fd_set;<span class="hljs-comment">//用来存放所有的待检查的文件描述符</span><br>    <span class="hljs-keyword">int</span> max_fd;<br>    timeval tv;<span class="hljs-comment">//struct timeval结构用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。</span><br>    <span class="hljs-keyword">int</span> client_fds[CONCURRENT_MAX+<span class="hljs-number">1</span>];<span class="hljs-comment">//客户端套接字</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_addr</span>[<span class="hljs-title">CONCURRENT_MAX</span>+1];</span><span class="hljs-comment">//客户端对应的地址信息</span><br>    <span class="hljs-keyword">int</span> client_to[CONCURRENT_MAX+<span class="hljs-number">1</span>];<span class="hljs-comment">//客户端想要发送的对象</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> filename;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> path;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_server::init</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> port)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><span class="hljs-comment">//sockaddr_in: Socket address, internet style.表示网络地址的结构体(internet和socket通用)</span><br>    server_addr.sin_len = <span class="hljs-keyword">sizeof</span>(struct sockaddr_in);<br>    server_addr.sin_family = AF_INET;<span class="hljs-comment">//socket只能用这个</span><br>    server_addr.sin_port = htons(port);<br>    server_addr.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-comment">//    server_addr.sin_port = htons(0);//16位整数 主机字节序转网络字节序,此处为设置端口号(本机是小端存储，网络字节是大端)</span><br><span class="hljs-comment">//    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);//设置本机IP地址</span><br>    <span class="hljs-built_in">memset</span>(&amp;(server_addr.sin_zero),<span class="hljs-number">0</span>,<span class="hljs-number">8</span>);<br>    <span class="hljs-comment">//创建socket</span><br>    server_sock_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (server_sock_fd == <span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//未能成功打开网络通讯端口</span><br>        perror(<span class="hljs-string">&quot;socket error&quot;</span>);<span class="hljs-comment">//输出字符串+errno对应的错误</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> on = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(setsockopt(server_sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="hljs-keyword">sizeof</span>(on))==<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//防止出现bind error的地址已被占用</span><br>        perror(<span class="hljs-string">&quot;setsockopt&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//绑定socket</span><br>    <span class="hljs-keyword">int</span> bind_result = bind(server_sock_fd, (struct sockaddr *)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br><br>    <span class="hljs-keyword">if</span> (bind_result == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;bind error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//listen</span><br>    <span class="hljs-keyword">if</span> (listen(server_sock_fd, BACKLOG) == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;listen error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;欢迎使用SOCKET通讯系统，输入quit并确认可退出\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_server::start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FD_ZERO(&amp;server_fd_set);<br>    <span class="hljs-comment">//标准输入</span><br>    FD_SET(STDIN_FILENO, &amp;server_fd_set);<span class="hljs-comment">//用于在文件描述符集合中增加一个新的文件描述符。STDIN_FILENO是标准输入文件描述符</span><br><br>    <span class="hljs-keyword">if</span> (max_fd &lt; STDIN_FILENO)<span class="hljs-comment">//STDIN_FILENO = 0</span><br>        max_fd = STDIN_FILENO;<br>    <span class="hljs-comment">//服务器端socket</span><br>    FD_SET(server_sock_fd, &amp;server_fd_set);<span class="hljs-comment">//把要检测的套接字server_sock_fd加入到集合中</span><br>    <span class="hljs-keyword">if</span> (max_fd &lt; server_sock_fd)&#123;<br>        max_fd = server_sock_fd;<br>    &#125;<br>    <span class="hljs-comment">//客户端连接</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= CONCURRENT_MAX; i++)&#123;<br>        <span class="hljs-keyword">if</span> (client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>            FD_SET(client_fds[i], &amp;server_fd_set);<br>            <span class="hljs-keyword">if</span> (max_fd &lt; client_fds[i])<span class="hljs-comment">//找到文件描述符中的最大值并存储</span><br>                max_fd = client_fds[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ret = select(max_fd+<span class="hljs-number">1</span>, &amp;server_fd_set, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tv);<span class="hljs-comment">//检测server_fd_set中的套接字中是否有可读信息</span><br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;select 出错&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;timeout...\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_server::sendmessage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ret为未状态发生变化的文件描述符的个数</span><br>    <span class="hljs-keyword">if</span> (FD_ISSET(STDIN_FILENO, &amp;server_fd_set))&#123;<span class="hljs-comment">//检测是否可写，可发送语句</span><br>        <span class="hljs-comment">//标准输入</span><br>        <span class="hljs-built_in">memset</span>(input_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(input_msg));<br>        fgets(input_msg, BUFFER_SIZE, <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-keyword">char</span> *find = <span class="hljs-built_in">strchr</span>(input_msg, <span class="hljs-string">&#x27;\n&#x27;</span>);<span class="hljs-comment">//查找换行符</span><br>        <span class="hljs-keyword">if</span>(find) *find = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//如果find不为空指针,就把一个空字符放在这里</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(input_msg, <span class="hljs-string">&quot;\\quit&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            shutdown(server_sock_fd,SHUT_RDWR);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(input_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; input_msg[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<span class="hljs-comment">//向每个连接的客户端发送信息</span><br>                <span class="hljs-keyword">if</span> (client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s; s.clear(); s=<span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//表明这是谁发过来的</span><br>                    <span class="hljs-keyword">if</span>(send(client_fds[i],s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>                        perror(<span class="hljs-string">&quot;发送消息出错!&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(send(client_fds[i], input_msg, BUFFER_SIZE, <span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>                        perror(<span class="hljs-string">&quot;发送消息出错!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; input_msg[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>                <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s; s.clear();<br>                    s=<span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//表明这是谁发过来的</span><br>                    <span class="hljs-keyword">if</span>(send(client_fds[i],s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>                        perror(<span class="hljs-string">&quot;转发消息出错!&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>                <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(send(client_fds[i],input_msg,BUFFER_SIZE,<span class="hljs-number">0</span>)&lt;<span class="hljs-number">0</span>)<br>                        perror(<span class="hljs-string">&quot;发送消息出错！&quot;</span>);<br>                &#125;<br>            &#125;<br>            path.clear();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; input_msg[i]!=<span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; input_msg[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>                path+=input_msg[i];<br>            &#125;<br>            FILE *fp=fopen(path.c_str(),<span class="hljs-string">&quot;rb+&quot;</span>);<br>            <span class="hljs-keyword">char</span> chtemp[BUFFER_SIZE+<span class="hljs-number">1</span>];<br>            <span class="hljs-built_in">memset</span>(chtemp,<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-keyword">sizeof</span>(chtemp));<br>            <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件无法打开\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span>((cnt=fread(chtemp,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>),BUFFER_SIZE,fp))&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>                        <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>                            <span class="hljs-keyword">if</span>(send(client_fds[i],chtemp,cnt,<span class="hljs-number">0</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>                                perror(<span class="hljs-string">&quot;发送消息出错!&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-built_in">memset</span>(chtemp,<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-keyword">sizeof</span>(chtemp));<br>                &#125;<br>                fclose(fp);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Transfer Successful!\n&quot;</span>);<br>            &#125;<br>            path.clear(); filename.clear();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; input_msg[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;敬请期待!\n&quot;</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_server::sendIP</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s1=<span class="hljs-string">&quot;0&quot;</span>;<br>    send(client_fds[index],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>);<br>    s1.clear();<br><br>    s1=<span class="hljs-string">&quot;1 您现在是&quot;</span>+<span class="hljs-built_in">std</span>::to_string(index)+<span class="hljs-string">&quot;号客户机, 当前聊天室内成员如下：\n&quot;</span>;<br>    send(client_fds[index],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>        <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>            s1.clear();<br>            s1=<span class="hljs-string">&quot;0&quot;</span>;<br>            send(client_fds[index],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>);<br>            s1.clear();<br>            s1=<span class="hljs-string">&quot;1 &quot;</span>+<span class="hljs-built_in">std</span>::to_string(i)+<span class="hljs-string">&quot;号客户机，IP地址为：&quot;</span>+inet_ntoa(client_addr[i].sin_addr)+<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">if</span>(send(client_fds[index],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span> &amp;&amp; i!=index)&#123;<br>            s1.clear();<br>            s1=<span class="hljs-string">&quot;0&quot;</span>;<br>            send(client_fds[i],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>);<br>            s1.clear();<br>            s1=<span class="hljs-string">&quot;1 新加入了&quot;</span>+<span class="hljs-built_in">std</span>::to_string(index)+<span class="hljs-string">&quot;号客户机，IP地址为：&quot;</span>+inet_ntoa(client_addr[index].sin_addr)+<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">if</span>(send(client_fds[i],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_server::recv_word</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span> byte_num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(client_to[index]==<span class="hljs-number">0</span> || client_to[index]==<span class="hljs-number">-2</span>)&#123;<span class="hljs-comment">//发送给服务器的或者群发</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端(%d):&quot;</span>,index);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>; j&lt;byte_num; j++)&#123;<br>            <span class="hljs-keyword">if</span>(recv_msg[j]==<span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,recv_msg[j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(client_to[index]==<span class="hljs-number">-2</span>)&#123;<span class="hljs-comment">//群发其余客户端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>            <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span> &amp;&amp; i!=index)&#123;<br>                <span class="hljs-comment">//先给id发送这是谁发过来的</span><br>                <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s; s.clear();<br>                s=<span class="hljs-built_in">std</span>::to_string(index);<span class="hljs-comment">//表明这是谁发过来的</span><br>                <span class="hljs-keyword">if</span>(send(client_fds[i],s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>                    perror(<span class="hljs-string">&quot;转发消息出错!&quot;</span>);<br>                <span class="hljs-keyword">if</span> (send(client_fds[i], recv_msg, BUFFER_SIZE, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)&#123;<br>                    perror(<span class="hljs-string">&quot;转发消息出错!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(client_to[index]!=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//发送给个人的</span><br>        <span class="hljs-comment">//先给id发送这是谁发过来的</span><br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s; s.clear();<br>        s=<span class="hljs-built_in">std</span>::to_string(index);<span class="hljs-comment">//表明这是谁发过来的</span><br>        <span class="hljs-keyword">if</span>(send(client_fds[client_to[index]],s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>            perror(<span class="hljs-string">&quot;转发消息出错!&quot;</span>);<br>        <span class="hljs-keyword">if</span> (send(client_fds[client_to[index]], recv_msg, BUFFER_SIZE, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)&#123;<br>            perror(<span class="hljs-string">&quot;转发消息出错!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_server::recv_file</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span> byte_num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> tempfilename; tempfilename.clear();<br>    <span class="hljs-keyword">if</span>(client_to[index]==<span class="hljs-number">0</span> || client_to[index]==<span class="hljs-number">-2</span>)&#123;<span class="hljs-comment">//发送给服务器的或者群发</span><br>        <span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=byte_num<span class="hljs-number">-1</span>; j&gt;<span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span>(recv_msg[j]==<span class="hljs-string">&#x27;/&#x27;</span> || recv_msg[j]==<span class="hljs-string">&#x27;\\&#x27;</span>)&#123;<br>                pos=j; <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=pos+<span class="hljs-number">1</span>; j&lt;byte_num; j++)&#123;<br>            <span class="hljs-keyword">if</span>(recv_msg[j]==<span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>            filename+=recv_msg[j];<br>        &#125;<br>        <span class="hljs-comment">//取得文件名称，准备建立新的文件</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端(%d)向你传送了一个文件，请输入您想要存放的绝对路径，例如：/Users/longzhengtian/Desktop/\n注意，最后要有一个&#x27;/&#x27;符号，如果没有，系统将自动填充，请输入：&quot;</span>,index);<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>&gt;&gt;path; getchar();<br>        <span class="hljs-keyword">if</span>(path[path.size()<span class="hljs-number">-1</span>]!=<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<span class="hljs-comment">//如果没有&#x27;/&#x27;的补救措施</span><br>            path+=<span class="hljs-string">&quot;/&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">//filename=&quot;new_&quot;+filename;</span><br>        path+=filename;<br>        FILE *fp=fopen(path.c_str(),<span class="hljs-string">&quot;wb+&quot;</span>);<br>        <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收文件出错!\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>            <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>((cnt=recv(client_fds[index],recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>)) &amp;&amp; cnt&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(fwrite(recv_msg,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>),cnt,fp)&lt;cnt)&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收文件出错!\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>                <span class="hljs-keyword">if</span>(cnt!=BUFFER_SIZE) <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Receive successful!\n&quot;</span>);<br>            fclose(fp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(client_to[index]==<span class="hljs-number">0</span>) path.clear(); filename.clear();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(client_to[index]==<span class="hljs-number">-2</span>)&#123;<span class="hljs-comment">//群发</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>            <span class="hljs-keyword">if</span>(client_fds[i]!=<span class="hljs-number">0</span> &amp;&amp; i!=index)&#123;<br>                <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s; s.clear();<br>                s=<span class="hljs-built_in">std</span>::to_string(index);<span class="hljs-comment">//表明这是谁发过来的</span><br>                <span class="hljs-keyword">if</span>(send(client_fds[i],s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>                    perror(<span class="hljs-string">&quot;转发消息出错!&quot;</span>);<br>            &#125;<br>        &#125;<br>        filename=<span class="hljs-string">&quot;2 &quot;</span>+path;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i!=index &amp;&amp; client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(send(client_fds[i],filename.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)&lt;<span class="hljs-number">0</span>)<br>                    perror(<span class="hljs-string">&quot;发送消息出错！&quot;</span>);<br>            &#125;<br>        &#125;<br>        FILE *fp=fopen(path.c_str(),<span class="hljs-string">&quot;rb+&quot;</span>);<br>        <span class="hljs-keyword">char</span> chtemp[BUFFER_SIZE+<span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">memset</span>(chtemp,<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-keyword">sizeof</span>(chtemp));<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件无法打开\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span>((cnt=fread(chtemp,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>),BUFFER_SIZE,fp))&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=CONCURRENT_MAX; i++)&#123;<br>                    <span class="hljs-keyword">if</span>(i!=index &amp;&amp; client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(send(client_fds[i],chtemp,cnt,<span class="hljs-number">0</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>                            perror(<span class="hljs-string">&quot;发送消息出错!&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-built_in">memset</span>(chtemp,<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-keyword">sizeof</span>(chtemp));<br>            &#125;<br>            fclose(fp);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Transfer Successful!\n&quot;</span>);<br>        &#125;<br>        path.clear(); filename.clear();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(client_to[index]!=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//发送给个人的</span><br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s; s.clear();<br>        s=<span class="hljs-built_in">std</span>::to_string(index);<span class="hljs-comment">//表明这是谁发过来的</span><br>        <span class="hljs-keyword">if</span>(send(client_fds[client_to[index]],s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>            perror(<span class="hljs-string">&quot;转发文件出错!&quot;</span>);<br>        <span class="hljs-keyword">if</span>(send(client_fds[client_to[index]],recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>            perror(<span class="hljs-string">&quot;转发文件出错!&quot;</span>);<br><br>        <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((cnt=recv(client_fds[index],recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>)) &amp;&amp; cnt&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(send(client_fds[client_to[index]],recv_msg,cnt,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<br>                perror(<span class="hljs-string">&quot;转发文件出错!&quot;</span>);<br>            <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>            <span class="hljs-keyword">if</span>(cnt!=BUFFER_SIZE) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A file from Client%d to Client%d was successfully forwarded through this server\n&quot;</span>,index,client_to[index]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_server::recv_video</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;敬请期待！\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_server::recv_and_forward</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= CONCURRENT_MAX; i++)&#123;<br>        <span class="hljs-keyword">if</span> (client_fds[i]!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (FD_ISSET(client_fds[i], &amp;server_fd_set))&#123;<br>                <span class="hljs-comment">//处理某个客户端过来的消息</span><br>                <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>                <span class="hljs-keyword">int</span> byte_num = recv(client_fds[i],recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">if</span> (byte_num &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span> (byte_num &gt; BUFFER_SIZE) byte_num = BUFFER_SIZE;<br>                    recv_msg[byte_num] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(recv_msg,<span class="hljs-string">&quot;\\exit&quot;</span>)==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//客户端要求解除连接</span><br>                        client_to[i]=<span class="hljs-number">-1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(client_to[i]==<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//这条信息是对面发来指定发送对象的</span><br>                        <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>) client_to[i]=<span class="hljs-number">-2</span>;<br>                        <span class="hljs-keyword">else</span> client_to[i]=recv_msg[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<span class="hljs-comment">//文字</span><br>                        recv_word(i,byte_num);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;2&#x27;</span>)&#123;<span class="hljs-comment">//文件</span><br>                        recv_file(i,byte_num);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;3&#x27;</span>)&#123;<span class="hljs-comment">//视频</span><br>                        recv_video(i);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(byte_num &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;从客户端(%d)接受消息出错.\n&quot;</span>,i);<br>                <span class="hljs-keyword">else</span>&#123;<br>                    FD_CLR(client_fds[i], &amp;server_fd_set);<span class="hljs-comment">//用于在文件描述符集合中删除一个文件描述符。</span><br>                    client_fds[i] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端(%d)退出了\n&quot;</span>,i);<br>                    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s1;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=CONCURRENT_MAX; j++)&#123;<br>                        <span class="hljs-keyword">if</span>(client_fds[j]!=<span class="hljs-number">0</span> &amp;&amp; i!=j)&#123;<br>                            s1.clear();<br>                            s1=<span class="hljs-built_in">std</span>::to_string(i)+<span class="hljs-string">&quot;号客户机退出了!\n&quot;</span>;<br>                            send(client_fds[j],s1.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_server::accept_new</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (FD_ISSET(server_sock_fd, &amp;server_fd_set))&#123;<span class="hljs-comment">//检测server_sock_fd是否真的变成了可读，可接受语句</span><br>        <span class="hljs-comment">//有新的连接请求</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_address</span>;</span><br>        <span class="hljs-keyword">socklen_t</span> address_len=<span class="hljs-keyword">sizeof</span>(struct sockaddr_in);<br>        <span class="hljs-keyword">int</span> client_socket_fd = accept(server_sock_fd, (struct sockaddr *)&amp;client_address, &amp;address_len);<span class="hljs-comment">//对应客户端对connect</span><br><br>        <span class="hljs-keyword">if</span> (client_socket_fd &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= CONCURRENT_MAX; i++)&#123;<br>                <span class="hljs-keyword">if</span> (client_fds[i] == <span class="hljs-number">0</span>)&#123;<br>                    index = i;<br>                    client_fds[i] = client_socket_fd;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端(%d)加入成功 %s:%d \n&quot;</span>,index,inet_ntoa(client_address.sin_addr),ntohs(client_address.sin_port));<br>                <span class="hljs-comment">//inet_ntoa:接受一个in_addr结构体类型的参数并返回一个以点分十进制格式表示的IP地址字符串</span><br>                client_addr[index]=client_address;<br>                sendIP(index);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">memset</span>(input_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(input_msg));<br>                <span class="hljs-built_in">strcpy</span>(input_msg, <span class="hljs-string">&quot;服务器加入的客户端数达到最大值!\n&quot;</span>);<br>                send(client_socket_fd, input_msg, BUFFER_SIZE, <span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端连接数达到最大值，新客户端加入失败 %s:%d \n&quot;</span>,inet_ntoa(client_address.sin_addr),ntohs(client_address.sin_port));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//本地地址</span><br>    Socket_server tcpserver;<br>    tcpserver.init(<span class="hljs-number">11111</span>);<span class="hljs-comment">//初始化，创建并绑定套接字，开始监听</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!tcpserver.start()) &#123;<span class="hljs-comment">//建立连接失败</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            tcpserver.accept_new();<span class="hljs-comment">//是否有新的加入</span><br>            <span class="hljs-keyword">if</span>(!tcpserver.sendmessage()) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//发送信息，包含退出操作</span><br>            tcpserver.recv_and_forward();<span class="hljs-comment">//接受信息。</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> BUFFER_SIZE=<span class="hljs-number">1024</span>;<br><span class="hljs-keyword">char</span> recv_msg[BUFFER_SIZE];<br><span class="hljs-keyword">char</span> input_msg[BUFFER_SIZE];<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Socket_client</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Socket_client()&#123;<br>        server_sock_fd=<span class="hljs-number">0</span>;<br>        tv.tv_sec = <span class="hljs-number">20</span>;<br>        tv.tv_usec = <span class="hljs-number">0</span>;<br>        toID=<span class="hljs-number">-1</span>;<br>        fromID=<span class="hljs-number">0</span>;<br>    &#125;<br>    ~Socket_client()&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">connect_s</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">sendmessage</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recvmessage</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> server_sock_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br>    fd_set client_fd_set;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><br>    <span class="hljs-keyword">int</span> toID;<span class="hljs-comment">//-1是初始化，-2是群发，0以上是私聊</span><br>    <span class="hljs-keyword">int</span> fromID;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> filename;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> path;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_client::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    server_addr.sin_len = <span class="hljs-keyword">sizeof</span>(struct sockaddr_in);<br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(<span class="hljs-number">11111</span>);<br>    server_addr.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(&amp;(server_addr.sin_zero),<span class="hljs-number">0</span>,<span class="hljs-number">8</span>);<br>    server_sock_fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (server_sock_fd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;socket error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_client::connect_s</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(connect(server_sock_fd, (struct sockaddr *)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(struct sockaddr_in))==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器加入成功！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_client::start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FD_ZERO(&amp;client_fd_set);<br>    FD_SET(STDIN_FILENO, &amp;client_fd_set);<br>    FD_SET(server_sock_fd, &amp;client_fd_set);<br><br>    <span class="hljs-keyword">int</span> ret = select(server_sock_fd + <span class="hljs-number">1</span>, &amp;client_fd_set, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tv);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span> )&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select 出错!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret ==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;timeout...\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Socket_client::sendmessage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (FD_ISSET(STDIN_FILENO, &amp;client_fd_set))&#123;<br><br>        <span class="hljs-keyword">if</span>(toID==<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//没有制定发送对象，0号表示服务器</span><br>            <span class="hljs-keyword">int</span> a=<span class="hljs-number">-1</span>,b=<span class="hljs-number">-1</span>;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>            <span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b); toID=b;<br>            &#125;<br>            <span class="hljs-keyword">else</span> toID=<span class="hljs-number">-2</span>;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s=<span class="hljs-built_in">std</span>::to_string(toID);<br>            <span class="hljs-keyword">if</span>(send(server_sock_fd,s.c_str(),BUFFER_SIZE,<span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)&#123;<br>                perror(<span class="hljs-string">&quot;制定发送对象出错！&quot;</span>);<br>            &#125;<br>            getchar();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">memset</span>(input_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(input_msg));<br>            fgets(input_msg, BUFFER_SIZE, <span class="hljs-built_in">stdin</span>);<br><br>            <span class="hljs-keyword">char</span> *find = <span class="hljs-built_in">strchr</span>(input_msg, <span class="hljs-string">&#x27;\n&#x27;</span>);<span class="hljs-comment">//查找换行符</span><br>            <span class="hljs-keyword">if</span>(find)<span class="hljs-comment">//如果find不为空指针</span><br>                *find = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//就把一个空字符放在这里</span><br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(input_msg, <span class="hljs-string">&quot;\\quit&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>                shutdown(server_sock_fd,SHUT_RDWR);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(input_msg, <span class="hljs-string">&quot;\\exit&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>                toID=<span class="hljs-number">-1</span>;<br>                send(server_sock_fd,input_msg,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(input_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<span class="hljs-comment">//文字传送</span><br>                <span class="hljs-keyword">if</span> (send(server_sock_fd, input_msg, BUFFER_SIZE, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)&#123;<br>                    perror(<span class="hljs-string">&quot;发送消息出错!&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;2&#x27;</span>)&#123;<span class="hljs-comment">//文件传输</span><br>                <span class="hljs-keyword">if</span> (send(server_sock_fd, input_msg, BUFFER_SIZE, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)&#123;<br>                    perror(<span class="hljs-string">&quot;文件传输出错!&quot;</span>);<br>                &#125;<br>                <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> _path;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; input_msg[i]!=<span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; input_msg[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>                    _path+=input_msg[i];<br>                &#125;<br>                FILE *fp=fopen(_path.c_str(),<span class="hljs-string">&quot;rb+&quot;</span>);<br>                <span class="hljs-keyword">char</span> chtemp[BUFFER_SIZE+<span class="hljs-number">1</span>];<br>                <span class="hljs-built_in">memset</span>(chtemp,<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-keyword">sizeof</span>(chtemp));<br>                <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">nullptr</span>)&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件无法打开\n&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">while</span>((cnt=fread(chtemp,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>),BUFFER_SIZE,fp))&gt;<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(send(server_sock_fd,chtemp,cnt,<span class="hljs-number">0</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>                            perror(<span class="hljs-string">&quot;发送消息出错!&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-built_in">memset</span>(chtemp,<span class="hljs-string">&#x27;\0&#x27;</span>,<span class="hljs-keyword">sizeof</span>(chtemp));<br>                    &#125;<br>                    fclose(fp);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Transfer Successful!\n&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;3&#x27;</span>)&#123;<span class="hljs-comment">//视频聊天</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您选择了视频聊天，功能尚未完成\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;传输形式不合法，请重新输入。\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_client::recvmessage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fromID=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//先接收到的是发送方ID；</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; recv_msg[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>; i++)&#123;<br>        fromID*=<span class="hljs-number">10</span>;<br>        fromID+=recv_msg[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>    <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>    <span class="hljs-keyword">int</span> byte_num=recv(server_sock_fd,recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(byte_num&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (byte_num &gt; BUFFER_SIZE) byte_num = BUFFER_SIZE;<br>        recv_msg[byte_num] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; recv_msg[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<span class="hljs-comment">//文字传输</span><br>            <span class="hljs-keyword">if</span>(fromID==<span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器：&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端(%d):&quot;</span>,fromID);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>; j&lt;byte_num; j++)&#123;<br>                <span class="hljs-keyword">if</span>(recv_msg[j]==<span class="hljs-string">&#x27;\0&#x27;</span> || recv_msg[j]==<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,recv_msg[j]);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; recv_msg[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            <span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=byte_num<span class="hljs-number">-1</span>; j&gt;<span class="hljs-number">0</span>; j--)&#123;<br>                <span class="hljs-keyword">if</span>(recv_msg[j]==<span class="hljs-string">&#x27;/&#x27;</span> || recv_msg[j]==<span class="hljs-string">&#x27;\\&#x27;</span>)&#123;<br>                    pos=j; <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=pos+<span class="hljs-number">1</span>; j&lt;byte_num; j++)&#123;<br>                <span class="hljs-keyword">if</span>(recv_msg[j]==<span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>                filename+=recv_msg[j];<br>            &#125;<br>            <span class="hljs-comment">//取得文件名称，准备建立新的文件</span><br>            <span class="hljs-keyword">if</span>(fromID==<span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端(%d)&quot;</span>,fromID);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;向你传送了一个文件，请输入您想要存放的绝对路径，例如：/Users/longzhengtian/Desktop/\n注意，最后要有一个&#x27;/&#x27;符号，如果没有，系统将自动填充，请输入：&quot;</span>);<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>&gt;&gt;path; getchar();<br>            <span class="hljs-keyword">if</span>(path[path.size()<span class="hljs-number">-1</span>]!=<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<span class="hljs-comment">//如果没有&#x27;/&#x27;的补救措施</span><br>                path+=<span class="hljs-string">&quot;/&quot;</span>;<br>            &#125;<br>            <span class="hljs-comment">//filename=&quot;new_&quot;+filename;</span><br>            path+=filename;<br>            FILE *fp=fopen(path.c_str(),<span class="hljs-string">&quot;wb+&quot;</span>);<br>            <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收文件出错!(R216)\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>                <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>((cnt=recv(server_sock_fd,recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>)) &amp;&amp; cnt&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(fwrite(recv_msg,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>),cnt,fp)&lt;cnt)&#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收文件出错!(R223)\n&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>                    <span class="hljs-keyword">if</span>(cnt!=BUFFER_SIZE) <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Receive successful!\n&quot;</span>);<br>                fclose(fp);<br>            &#125;<br>            path.clear(); filename.clear();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(recv_msg[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; recv_msg[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            <span class="hljs-comment">//视频传输尚未完成</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(byte_num &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接受消息出错!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器端退出!\n&quot;</span>);<br>        shutdown(server_sock_fd,SHUT_RDWR);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Socket_client::receive</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (FD_ISSET(server_sock_fd, &amp;client_fd_set))&#123;<br>        <span class="hljs-built_in">memset</span>(recv_msg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(recv_msg));<br>        <span class="hljs-keyword">long</span> byte_num = recv(server_sock_fd,recv_msg,BUFFER_SIZE,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (byte_num &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (byte_num &gt; BUFFER_SIZE)&#123;<br>                byte_num = BUFFER_SIZE;<br>            &#125;<br>            recv_msg[byte_num] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>            recvmessage();<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(recv_msg,<span class="hljs-string">&quot;服务器加入的客户端数达到最大值!\n&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(byte_num &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接受消息出错!\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器端退出!\n&quot;</span>);<br>            shutdown(server_sock_fd,SHUT_RDWR);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    Socket_client tcpclient;<br>    tcpclient.init();<br><br>    <span class="hljs-keyword">if</span> (tcpclient.connect_s())&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!tcpclient.start())&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(!tcpclient.sendmessage()) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                tcpclient.receive();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDU程序设计思维实践题目总结</title>
    <link href="/2021/01/15/SDU%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E5%AE%9E%E8%B7%B5%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/15/SDU%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E5%AE%9E%E8%B7%B5%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><style type="text/css"><br>.tg  {border-collapse:collapse;border-spacing:0;}<br>.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}<br>.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}<br>.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}</style></p><table class="tg">  <tr>    <th class="tg-0pky">题目来源及链接</th>    <th class="tg-0pky">题目名称及讲解博客链接</th>    <th class="tg-0pky">涉及算法</th>    <th class="tg-0pky">原题以及原题链接</th>  </tr>  <tr>    <td class="tg-0pky" rowspan="2"><a href="https://vjudge.net/contest/359307"> 第二周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104655650">Maze</a></td>    <td class="tg-0pky">BFS</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/POJ-3984">POJ-3984</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104641803">Pour water</a></td>    <td class="tg-0pky">BFS</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/POJ-1606">POJ-1606</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/359340#problem">第二周实验</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104684273">化学</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FA">codeforces Gym270437A</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104678247">爆零(×)大力出奇迹(√)</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2093">HDU-2093 考试排名</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104683527">瑞神打牌</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=1786">POJ-1786Bridge Hands</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/359837">第三周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104677437">选数问题</a></td>    <td class="tg-0pky">DFS</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FC">codeforces Gym270437C</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104671506">区间选点</a></td>    <td class="tg-0pky">贪心</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FB">codeforces Gym270437B</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104668538">区间覆盖</a></td>    <td class="tg-0pky">贪心</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=2376">POJ-2376Cleaning Shifts</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/361823#problem">第一次csp测试</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104867940">咕咕东的奇遇</a></td>    <td class="tg-0pky">规律</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FD">codeforces Gym270437D</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104868784">咕咕东想吃饭</a></td>    <td class="tg-0pky">规律</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FE">codeforces Gym270437E</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104854720">可怕的宇宙射线</a></td>    <td class="tg-0pky">DFS/BFS+剪枝</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FF">codeforces Gym270437F</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/362075#problem">第四周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104925785">DDL的恐惧</a></td>    <td class="tg-0pky">贪心</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1789">HDU-1789Doing homework again</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104931827">四个数列</a></td>    <td class="tg-0pky">二分搜索</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=2785">POJ-2785 4 Values whose Sum is 0</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104932620">TT的神秘礼物</a></td>    <td class="tg-0pky">二分答案</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=3579">POJ-3579 Median</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="4"><a href="https://vjudge.net/contest/362802#problem">第五周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105022784">最大矩形</a></td>    <td class="tg-0pky">单调栈/动态规划</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1506">HDU-1506Largest Rectangle in a Histogram</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105028618">TT's Magic Cat</a></td>    <td class="tg-0pky">差分</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F272542%2Fproblem%2FA">codeforces Gym272542A</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105037747">平衡字符串</a></td>    <td class="tg-0pky">尺取</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FB">codeforces Gym270737B</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105058295">滑动窗口</a></td>    <td class="tg-0pky">单调队列</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=2823">POJ-2823Sliding Window</a></td>  </tr>  <tr>    <td class="tg-0pky">第1个月模拟题</td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/104932712">画图</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://118.190.20.162/view.page?gpid=T35">csp201512-3</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="4"><a href="https://vjudge.net/contest/363309#problem">第六周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105099260">氪金带东</a></td>    <td class="tg-0pky">树的直径</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196">HDU-2196Computer</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105103131">戴好口罩</a></td>    <td class="tg-0pky">并查集</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=1611">POJ-1611 The Suspects</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105105812">掌握魔法の东东 I</a></td>    <td class="tg-0pky">最小生成树-kruskal</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270437%2Fproblem%2FH">codeforces Gym270437H</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105106149">数据中心</a></td>    <td class="tg-0pky">最小生成树-kruskal</td>    <td class="tg-0pky"><a href="http://118.190.20.162/view.page?gpid=T83">csp201812-4</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://vjudge.net/contest/364552#problem">第六周限时模拟</a><br></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105134180">掌握魔法の东东 II</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://codeforces.com/gym/101510/problem/B">codeforces Gym101510B</a></td>  </tr>  <tr>    <td class="tg-0pky">第2个月模拟题</td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105114408">路径解析</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://118.190.20.162/view.page?gpid=T40">csp201604-3</a></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="4"><a href="https://vjudge.net/contest/365650#problem">第七周作业</a><br></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105254428">TT的魔法猫</a></td>    <td class="tg-0pky">Floyed+剪枝</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1704">HDU-1704Rank</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105245219">TT的旅行日记</a></td>    <td class="tg-0pky">两次普通Dijkstra/分层图最短路</td>    <td class="tg-0pky"><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2369">UVA-11374</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105255840">地铁修建</a></td>    <td class="tg-0pky">Dijkstra/kruskal</td>    <td class="tg-0pky"><a href="http://118.190.20.162/view.page?gpid=T54">csp201703-4</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105255187">TT的美梦</a></td>    <td class="tg-0pky">SPFA判负环</td>    <td class="tg-0pky"><a href="http://lightoj.com/login_main.php?url=volume_showproblem.php?problem=1074">LightOJ-1074</a></td>  </tr>  <tr>  <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/367074#overview">第二次csp测试</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105387125">HRZ的序列</a></td>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FC">Gym - 270737C</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105387136">HRZ学英语</a></td>    <td class="tg-0pky">类似尺取</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FD">Gym - 270737D</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105390205">咕咕东的奇妙序列</a></td>    <td class="tg-0pky">多重搜索</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FE">Gym - 270737E</a></td>  </tr>   <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/367361#problem">第八周作业</a><br></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105477675">区间选点 II </a></td>    <td class="tg-0pky">差分约束+spfa优化</td>    <td class="tg-0pky"><a href="http://poj.org/problem?id=1201">POJ-1201 Intervals</a> && <a href="http://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FF">Gym - 270737F </a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105508618">猫猫向前冲</a></td>    <td class="tg-0pky">拓扑排序</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1285">HDU-1285 确定比赛名次</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105572110">班长竞选</a></td>    <td class="tg-0pky">kosaraju缩点</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3639">HDU-3639 Hawk-and-Chicken</a></td>  </tr>   <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/368284#problem">第九周作业</a><br></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105591507">咕咕东的目录管理器 </a></td>    <td class="tg-0pky">复杂模拟题</td>    <td class="tg-0pky"><a href="https://open.kattis.com/problems/directorymanagement">Kattis directorymanagement</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105591368">东东学打牌</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="https://nanti.jisuanke.com/t/41408">计蒜客 41408</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105588963">签到题</a></td>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="http://codeforces.com/problemset/problem/1042/A">CodeForces 1042A</a></td>  </tr>  <tr>    <td class="tg-0pky">第3个月模拟题</td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105650060">炉石传说</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://118.190.20.162/view.page?gpid=T45">csp201609-3</a></td>  </tr>   <tr>    <td class="tg-0pky" rowspan="2"><a href="https://vjudge.net/contest/369422#problem"> 第十周限时模拟</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105694794">签到题</a></td>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="https://agc005.contest.atcoder.jp/tasks/agc005_a?lang=en">AtCoder 2059</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105680769">东东转魔方</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5983">HDU 5983</a></td>  </tr>   <tr>    <td class="tg-0pky" rowspan="3"><a href="https://vjudge.net/contest/369045#problem/A">第十周作业</a><br></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105735326">签到题 </a></td>    <td class="tg-0pky">无</td>    <td class="tg-0pky"><a href="http://codeforces.com/problemset/problem/1141/A">CodeForces 1141A</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105732107">LIS & LCS</a></td>    <td class="tg-0pky">动态规划</td>    <td class="tg-0pky"><a href="http://codeforces.com/enter?back=%2Fgym%2F277140%2Fproblem%2FA">Gym 277140A</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105739945">拿数问题 II</a></td>    <td class="tg-0pky">动态规划</td>    <td class="tg-0pky"><a href="http://codeforces.com/problemset/problem/455/A">CodeForces 455A</a></td>  </tr>    <tr>    <td class="tg-lboi" rowspan="6"><a href="https://vjudge.net/contest/371040">第11周作业</a></td>    <td class="tg-lboi" rowspan="4"><a href="https://blog.csdn.net/weixin_43347376/article/details/105846825">Week11作业必做题1-4（签到题）</a></td>    <td class="tg-0pky">无</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/2927258/origin"><span style="font-weight:normal;font-style:normal;text-decoration:none">计蒜客 T1065</span></a></td>  </tr>  <tr>    <td class="tg-0pky">无</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/3260866/origin"><span style="font-weight:normal;font-style:normal;text-decoration:none">计蒜客 T3176</span></a></td>  </tr>  <tr>    <td class="tg-0pky">无</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/2916506/origin"><span style="font-weight:normal;font-style:normal;text-decoration:none">计蒜客 T1111</span></a></td>  </tr>  <tr>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/2266490/origin"><span style="font-weight:normal;font-style:normal;text-decoration:none">CodeForces 1138A</span></a></td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/105849354">东东与 ATM</a></td>    <td class="tg-0lax">多组背包</td>    <td class="tg-0lax"><a href="https://vjudge.net/problem/15300/origin"><span style="font-weight:normal;font-style:normal;text-decoration:none">POJ 1276</span></a></td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/105849920">东东开车了</a></td>    <td class="tg-0lax">01背包回溯</td>    <td class="tg-0lax"><a href="https://vjudge.net/problem/19209/origin"><span style="font-weight:normal;font-style:normal;text-decoration:none">UVA 624</span></a></td>  </tr></thead><tbody>  <tr>    <td class="tg-cly1" rowspan="3"><a href="https://vjudge.net/contest/372543">第三次csp测试</a></td>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/105953269">瑞神的的序列</a></td>    <td class="tg-0lax">思路</td>    <td class="tg-cly1" rowspan="3">原题及链接丢失</td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/105953269">消消乐大师——Q老师</a></td>    <td class="tg-0lax">无</td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/105953269">咕咕东学英语</a></td>    <td class="tg-0lax">反向思路</td>  </tr>  <tr>    <td class="tg-cly1" rowspan="5"><a href="https://vjudge.net/contest/372816">第12周作业</a></td>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/106064162">必做题-1</a></td>    <td class="tg-0lax">无</td>    <td class="tg-0lax"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1029">HDU 1029</a></td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/106064213">必做题-2</a></td>    <td class="tg-0lax">BFS</td>    <td class="tg-0lax"><a href="http://poj.org/problem?id=2251">POJ 2251</a></td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/106015501">必做题-3</a></td>    <td class="tg-0lax">DP</td>    <td class="tg-0lax"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1024">HDU 1024</a></td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/106064329">选做题-1</a></td>    <td class="tg-0lax">区间DP</td>    <td class="tg-0lax"><a href="http://poj.org/problem?id=2955">POJ 2955</a></td>  </tr>  <tr>    <td class="tg-0lax"><a href="https://blog.csdn.net/weixin_43347376/article/details/106064529">选做题-2</a></td>    <td class="tg-0lax">状压DP</td>    <td class="tg-0lax"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1074">HDU 1074</a></td>  </tr>  <tr>    <td class="tg-9wq8" rowspan="5"><a href="https://vjudge.net/contest/373643">第13周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106215504">TT的神秘礼物1</a></td>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/CodeForces-1352B/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">CodeForces 1352B</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106215753">TT的神秘礼物2</a></td>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/CodeForces-1352C/origin" target="_blank" rel="noopener noreferrer">CodeForces 1352C</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106215787">TT的奖励</a></td>    <td class="tg-0pky">DP</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/HDU-1176/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">HDU 1176</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106215802">TT的苹果树</a></td>    <td class="tg-0pky">树形DP</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/POJ-2342/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">POJ 2342</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106215809">TT的神秘礼物3</a></td>    <td class="tg-0pky">单调队列优化DP</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/HDU-3415/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">HDU 3415</span></a></td>  </tr></thead><tbody>  <tr>    <td class="tg-c3ow">第4个月模拟题</td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/105835153">元素选择器</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="http://118.190.20.162/view.page?gpid=T77">csp201809-3</a></td>  </tr>  <tr>    <td class="tg-9wq8" rowspan="5"><a href="https://vjudge.net/contest/374325">第14周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106269072">Q老师与剪刀石头布</a></td>    <td class="tg-0pky">思路</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/CodeForces-1245B/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">CodeForces 1245B</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106291150">Q老师与十字架</a></td>    <td class="tg-0pky">无</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/CodeForces-1194B/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">CodeForces 1194B</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106291159">Q老师的考验</a></td>    <td class="tg-0pky">矩阵快速幂</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/HDU-1757/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">HDU 1757</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106291169">Q老师染砖</a></td>    <td class="tg-0pky">矩阵快速幂优化dp</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/POJ-3734/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">POJ 3734</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106291183">Q老师度假</a></td>    <td class="tg-0pky">变形矩阵快速幂优化dp</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-A1795/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">计蒜客 A1795</span></a></td>  </tr>  <tr>    <td class="tg-c3ow"><a href="https://vjudge.net/contest/374962">第14周限时模拟</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106281746">猫睡觉问题</a></td>    <td class="tg-0pky">模拟</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/HDU-3700/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">HDU 3700</span></a></td>  </tr>  <tr>    <td class="tg-9wq8" rowspan="3"><a href="https://vjudge.net/contest/375784">第15周作业</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106386544">ZJM与霍格沃滋</a></td>    <td class="tg-0pky">字符串哈希</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/HDU-1880/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">HDU 1880</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106386919">ZJM与生日礼物</a></td>    <td class="tg-0pky">字典树</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/HDU-1305/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">HDU 1305</span></a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106390255">ZJM与纸条</a></td>    <td class="tg-0pky">KMP算法</td>    <td class="tg-0pky"><a href="https://vjudge.net/problem/POJ-3461/origin" target="_blank" rel="noopener noreferrer"><span style="font-weight:normal;font-style:normal;text-decoration:none">POJ 3461</span></a></td>  </tr>  <tr>    <td class="tg-9wq8" rowspan="3"><a href="https://vjudge.net/contest/376753">第四次csp测试</a></td>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106527518">TT数鸭子</a></td>    <td class="tg-0pky">暴力</td>    <td class="tg-0pky"><a href="https://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FG">Gym 270737G</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106527645">ZJM要抵御宇宙射线</a></td>    <td class="tg-0pky">暴力</td>    <td class="tg-0pky"><a href="https://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FH">Gym 270737H</a></td>  </tr>  <tr>    <td class="tg-0pky"><a href="https://blog.csdn.net/weixin_43347376/article/details/106527711">宇宙狗的危机</a></td>    <td class="tg-0pky">区间dp</td>    <td class="tg-0pky"><a href="https://codeforces.com/enter?back=%2Fgym%2F270737%2Fproblem%2FI">Gym 270737I</a></td>  </tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外排序（最小输者树实现）</title>
    <link href="/2021/01/14/%E5%A4%96%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9C%80%E5%B0%8F%E8%BE%93%E8%80%85%E6%A0%91%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/01/14/%E5%A4%96%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9C%80%E5%B0%8F%E8%BE%93%E8%80%85%E6%A0%91%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>应用竞赛树结构模拟实现外排序。</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>（1） 设计实现最小输者树结构ADT，ADT中应包括初始化、返回赢者，重构等基本操作。<br>（2） 设计实现外排序，外部排序中的生成最初归并串以及K路归并都应用最小输者树结构实现；<br>（3） 随机创建一个较长的文件；设计归并路数以及缓冲区的大小；获得外排序的访问磁盘的次数并进行分析。可采用小文件来模拟磁盘块。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h5 id="输者树介绍"><a href="#输者树介绍" class="headerlink" title="输者树介绍"></a>输者树介绍</h5><p>对于输者树的构建过程，数据结构课本上并没有多说，仅仅讲解了赢者树，如下图所示，赢者上升进入下一次比赛。<br><img src="https://img-blog.csdnimg.cn/20200407104959511.png#pic_center" alt="最小赢者树"><br>哦，原来这就是赢者树，那么这个最小赢者树是不是就是最大输者树了呢？</p><p>想多了，课本上有一个最小输者树的图如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200407104926754.png#pic_center" alt="最小输者树"><br>说实话，第一次见到这个图我是一脸懵逼的(<del>可能我当时上课讲的忘了</del>)，中间结点加上上面的输者结点，包含$a\sim f$的所有结点，根本就不是我开始想象的输者树就是每个结点记录当前的输者。<br><img src="https://img-blog.csdnimg.cn/20200407105859712.jpg?x-oss-process=image/watermark,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzExNTAwMQ==,size_16,color_FFFFFF,t_70#pic_center" width="30%" height="30%" alt=""/></p><p>后来在网上看了一些博客才懂什么意思，我们下面看一下课本上这个图是怎么建立起来的：<br><img src="https://img-blog.csdnimg.cn/20200407111848667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0NzM3Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这棵树上，边的值才是比赛晋级的选手，而不是赢者树中结点的才是晋级。</p><p>我们按照先从右孩子开始的顺序来构建这棵最小输者树。</p><ol><li>a与b比较，b输，a晋级</li><li>c与d比较，d输，c晋级 </li><li>e与f比较，e输，f晋级</li><li>g与h比较，h输，g晋级</li><li>a与c比较，c输，a晋级</li><li>f与g比较，g输，f晋级</li><li>a与f比较，a输，f晋级</li></ol><p>所以说，每个结点都保存了当前的输者没有错，只是图上没有表现出来晋级的选手而已。每次比赛的选手都是晋级的选手（我就说嘛，什么比赛最后要输的一方）。</p><h5 id="外排序"><a href="#外排序" class="headerlink" title="外排序"></a>外排序</h5><p>这个外排序的思路是先利用内排序构造顺串，然后这些顺串在进行k路归并，合并成最终结果。</p><p>我们在这里使用最小输者树来构造顺串，这样可以减少初始顺串的个数。</p><p>在利用最小输者树构造顺串的时候，每个选手都对应着输入集合中的一个元素。另外，每一个选手还有一个顺串号。</p><p>赢者的规则是：</p><ol><li>具有较小顺串号的元素获胜。</li><li>顺串号相同，较小元素值的元素获胜。</li></ol><p>那这些元素的顺串号又怎么确定呢？伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">建立前p个选手的最小赢者树（p是内存的大小）<br><span class="hljs-keyword">while</span>(还有元素没有输出到对应的顺串中)<br>&#123;<br>将最终赢者w移入它的顺串号所对应的顺串中;<br><span class="hljs-keyword">if</span>(输入集合中又下一个元素)<br>n=下一个元素;<br><span class="hljs-keyword">else</span> &#123;<br>n=INT_MIN;<br>n的顺串号=INT_MAX；<span class="hljs-comment">//这样就不会输入顺串中</span><br>&#125;<br><span class="hljs-keyword">if</span>(n的元素值&gt;=w的值) n的顺串号=w的顺串号;<br><span class="hljs-keyword">else</span> n的顺串号=w的顺串号+<span class="hljs-number">1</span>;<br>n代替w的位置，重构赢者树;<br>&#125;<br></code></pre></td></tr></table></figure><p>建立了这些顺串后，再利用一次最小输者树就可以将他们归并，并且存到对应的磁盘文件中。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Variable</span>//变量结构体</span><br><span class="hljs-class">&#123;</span><br>    Variable()&#123;<br>        visitDiskTime=<span class="hljs-number">0</span>;<br>        n=<span class="hljs-number">0</span>; m=<span class="hljs-number">0</span>;<br>        numberOfDisk=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">string</span> path;<span class="hljs-comment">//磁盘的位置，可以根据自己的电脑修改</span><br>    <span class="hljs-built_in">string</span> fileName=<span class="hljs-string">&quot;Disk.txt&quot;</span>;<span class="hljs-comment">//磁盘文件名称</span><br>    <span class="hljs-built_in">string</span> file;<span class="hljs-comment">//最终完整路径</span><br>    <span class="hljs-keyword">int</span> visitDiskTime,n,m,numberOfDisk;<br>    <span class="hljs-keyword">char</span> ch1,ch;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SequentialStringPlayer</span>//用于构建顺串</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id,key;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;=(SequentialStringPlayer &amp;p)&#123;<br>        <span class="hljs-keyword">return</span> (id!=p.id) ? (id&lt;p.id) : (key&lt;p.key);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">loserTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~loserTree()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(T* thePlayer,<span class="hljs-keyword">int</span> number)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTheWinner</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rePlay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> thePLayer,T newvalue)</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinimumLoserTree</span> :</span> <span class="hljs-keyword">public</span> loserTree&lt;T&gt;<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    MinimumLoserTree(T* thePlayer=<span class="hljs-literal">nullptr</span>,<span class="hljs-keyword">int</span> theNumberOfPlayers=<span class="hljs-number">0</span>)&#123;<br>        tree=<span class="hljs-literal">nullptr</span>; advance=<span class="hljs-literal">nullptr</span>;<br>        initialize(thePlayer,theNumberOfPlayers);<br>    &#125;<br>    ~MinimumLoserTree()&#123;<span class="hljs-keyword">delete</span>[] tree;<span class="hljs-keyword">delete</span>[] advance;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(T* thePlayer,<span class="hljs-keyword">int</span> theNumberOfPlayers)</span></span>;<span class="hljs-comment">//初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTheWinner</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> tree[<span class="hljs-number">0</span>];&#125;;<span class="hljs-comment">//输出当前的赢者</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rePlay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> thePlayer,T newvalue)</span></span>;<span class="hljs-comment">//重构</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> numberOfPlayers;<br>    <span class="hljs-keyword">int</span>* tree;<span class="hljs-comment">//记录内部结点，tree[0]是最终的赢者下标，不使用二叉树结点，因为父子关系都是通过计算得出</span><br>    <span class="hljs-keyword">int</span>* advance;<span class="hljs-comment">//记录比赛晋级的成员</span><br>    T* player;<span class="hljs-comment">//参与比赛的元素</span><br>    <span class="hljs-keyword">int</span> lowExt;<span class="hljs-comment">//最底层外部结点的个数,2*(n-s)</span><br>    <span class="hljs-keyword">int</span> offset;<span class="hljs-comment">//2*s-1</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">winner</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> player[x]&lt;=player[y]?x:y;&#125;;<span class="hljs-comment">//返回更小的元素下标</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">loser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> player[x]&lt;=player[y]?y:x;&#125;;<span class="hljs-comment">//返回更大的元素下标</span><br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> MinimumLoserTree&lt;T&gt;::initialize(T* thePlayer,<span class="hljs-keyword">int</span> theNumberOfPlayers)<br>&#123;<br>    <span class="hljs-keyword">int</span> n=theNumberOfPlayers;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Error! the number must &gt;= 2&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    player=thePlayer;<br>    numberOfPlayers=n;<br>    <span class="hljs-keyword">delete</span>[] tree; <span class="hljs-keyword">delete</span>[] advance;<br>    tree=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n+<span class="hljs-number">1</span>];<br>    advance=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n+<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">int</span> s; <span class="hljs-keyword">for</span> (s=<span class="hljs-number">1</span>; <span class="hljs-number">2</span>*s&lt;=n<span class="hljs-number">-1</span>; s+=s);<span class="hljs-comment">//s=2^log(n-1)-1（常数优化速度更快），s是最底层最左端的内部结点</span><br><br>    lowExt=<span class="hljs-number">2</span>*(n-s); offset=<span class="hljs-number">2</span>*s<span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=lowExt; i+=<span class="hljs-number">2</span>)<span class="hljs-comment">//最下面一层开始比赛</span><br>        play((i+offset)/<span class="hljs-number">2</span>,i<span class="hljs-number">-1</span>,i);<span class="hljs-comment">//父结点计算公式第一条</span><br><br>    <span class="hljs-keyword">int</span> temp=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//如果有奇数个结点，处理下面晋级的一个和这个单独的结点</span><br>        play(n/<span class="hljs-number">2</span>,advance[n<span class="hljs-number">-1</span>],lowExt+<span class="hljs-number">1</span>);<br>        temp=lowExt+<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> temp=lowExt+<span class="hljs-number">2</span>;<span class="hljs-comment">//偶数个结点，直接处理次下层</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=temp; i&lt;=n; i+=<span class="hljs-number">2</span>)<span class="hljs-comment">//经过这个循环，所有的外部结点都处理完毕</span><br>        play((i-lowExt+n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,i<span class="hljs-number">-1</span>,i);<br><br>    tree[<span class="hljs-number">0</span>]=advance[<span class="hljs-number">1</span>];<span class="hljs-comment">//tree[0]是最终的赢者，也就是决赛的晋级者</span><br><br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> MinimumLoserTree&lt;T&gt;::play(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> leftChild, <span class="hljs-keyword">int</span> rightChild)<br>&#123;<br>    <span class="hljs-comment">//tree结点存储相对较大的值，也就是这场比赛的输者</span><br>    tree[p]=loser(leftChild,rightChild);<br>    <span class="hljs-comment">//advance结点存储相对较小的值，也就是这场比赛的晋级者</span><br>    advance[p]=winner(leftChild,rightChild);<br><br>    <span class="hljs-keyword">while</span>(p % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; p &gt; <span class="hljs-number">1</span>)&#123;<br>        tree[p/<span class="hljs-number">2</span>]=loser(advance[p<span class="hljs-number">-1</span>],advance[p]);<br>        advance[p/<span class="hljs-number">2</span>]=winner(advance[p<span class="hljs-number">-1</span>],advance[p]);<br>        p /= <span class="hljs-number">2</span>;<span class="hljs-comment">//向上搜索</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> MinimumLoserTree&lt;T&gt;::rePlay(<span class="hljs-keyword">int</span> thePlayer,T newvalue)<br>&#123;<br>    <span class="hljs-keyword">int</span> n=numberOfPlayers;<br>    <span class="hljs-keyword">if</span>(thePlayer &lt;= <span class="hljs-number">0</span> || thePlayer &gt; n)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Error! the number must &gt;0 &amp; &lt;=n&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    player[thePlayer]=newvalue;<br><br>    <span class="hljs-keyword">int</span> matchNode,<span class="hljs-comment">//将要比赛的场次</span><br>        leftChild,<span class="hljs-comment">//比赛结点的左儿子</span><br>        rightChild;<span class="hljs-comment">//比赛结点的右儿子</span><br><br>    <span class="hljs-keyword">if</span>(thePlayer&lt;=lowExt)&#123;<span class="hljs-comment">//如果要比赛的结点在最下层</span><br>        matchNode=(offset+thePlayer)/<span class="hljs-number">2</span>;<br>        leftChild=<span class="hljs-number">2</span>*matchNode-offset;<br>        rightChild=leftChild+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//要比赛的结点在次下层</span><br>        matchNode=(thePlayer-lowExt+n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*matchNode==n<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//特殊情况，其中一方是晋级后的人</span><br>            leftChild=advance[<span class="hljs-number">2</span>*matchNode];<br>            rightChild=thePlayer;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            leftChild=<span class="hljs-number">2</span>*matchNode-n+<span class="hljs-number">1</span>+lowExt;<span class="hljs-comment">//这个操作是因为上面matchNode计算中/2取整了</span><br>            rightChild=leftChild+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//到目前位置，我们已经确定了要比赛的场次以及比赛的选手</span><br><br>    <span class="hljs-comment">//下面进行比赛重构，也就是和赢者树最大的不同，分两种情况</span><br>    <span class="hljs-keyword">if</span>(thePlayer==tree[<span class="hljs-number">0</span>])&#123;<span class="hljs-comment">//当你要重构的点是上一场比赛的赢家的话，过程比赢者树要简化</span><br>        <span class="hljs-keyword">for</span> (; matchNode&gt;=<span class="hljs-number">1</span>; matchNode/=<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">int</span> oldLoserNode=tree[matchNode];<span class="hljs-comment">//上一场比赛的输者</span><br>            tree[matchNode]=loser(oldLoserNode,thePlayer);<br>            advance[matchNode]=winner(oldLoserNode,thePlayer);<br>            thePlayer=advance[matchNode];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//其他情况重构和赢者树相同</span><br>        tree[matchNode]=loser(leftChild,rightChild);<br>        advance[matchNode]=winner(leftChild,rightChild);<br>        <span class="hljs-keyword">if</span>(matchNode==n<span class="hljs-number">-1</span> &amp;&amp; n%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//特殊情况，比赛结点是最后一层的最后一场比赛</span><br>            <span class="hljs-comment">//特殊在matchNode/2后，左儿子是晋级的选手，右儿子是一场都没有比过赛的选手</span><br>            matchNode/=<span class="hljs-number">2</span>;<br>            tree[matchNode]=loser(advance[n<span class="hljs-number">-1</span>],lowExt+<span class="hljs-number">1</span>);<br>            advance[matchNode]=winner(advance[n<span class="hljs-number">-1</span>],lowExt+<span class="hljs-number">1</span>);<br>        &#125;<br>        matchNode/=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (; matchNode&gt;=<span class="hljs-number">1</span>; matchNode/=<span class="hljs-number">2</span>)&#123;<br>            tree[matchNode]=loser(advance[matchNode*<span class="hljs-number">2</span>],advance[matchNode*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]);<br>            advance[matchNode]=winner(advance[matchNode*<span class="hljs-number">2</span>],advance[matchNode*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    tree[<span class="hljs-number">0</span>]=advance[<span class="hljs-number">1</span>];<span class="hljs-comment">//最终胜者</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Variable &amp;va)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入您想要的模拟磁盘位置，接下来的操作都是在当前路径下进行，输入样例：/Users/longzhengtian/Desktop/text/&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入：&quot;</span>; <span class="hljs-built_in">cin</span>&gt;&gt;va.path; va.file=va.path+va.fileName;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入您想要在磁盘中初始化数字的个数，这些数字将用于模拟外排序过程：&quot;</span>; <span class="hljs-built_in">cin</span>&gt;&gt;va.n;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入缓冲区大小（此处为缓冲区能存储数字的个数）：&quot;</span>; <span class="hljs-built_in">cin</span>&gt;&gt;va.m;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请问您是否想要将原始数据，顺串，最终数据显示在控制台中(&#x27;y&#x27; or &#x27;n&#x27;)：&quot;</span>; <span class="hljs-built_in">cin</span>&gt;&gt;va.ch1; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-function">ofstream <span class="hljs-title">fout1</span><span class="hljs-params">(va.file)</span></span>;<br>    <span class="hljs-keyword">if</span>(!fout1.is_open())&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;无法打开指定磁盘文件，无法初始化磁盘&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(va.ch1==<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;原始磁盘文件有：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=va.n; i++)&#123;<br>        <span class="hljs-keyword">int</span> x=random()%<span class="hljs-number">1000</span>+<span class="hljs-number">1</span>;<br>        fout1&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//random是C++11标准</span><br>        <span class="hljs-keyword">if</span>(va.ch1==<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(va.ch1==<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    fout1.close();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SequentialStringConstruction</span><span class="hljs-params">(Variable &amp;va,SequentialStringPlayer* ssplayer)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin1</span><span class="hljs-params">(va.file)</span></span>;<br>    <span class="hljs-keyword">if</span>(!fin1.is_open())&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;无法打开指定磁盘文件，无法进行顺串构造&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=va.m; i++)&#123;<span class="hljs-comment">//将数据读入缓冲区，进行顺串构造</span><br>        fin1&gt;&gt;ssplayer[i].key;<br>        ssplayer[i].id=<span class="hljs-number">1</span>;<br>        va.visitDiskTime++;<span class="hljs-comment">//访存次数+1</span><br>    &#125;<br>    <span class="hljs-function">MinimumLoserTree&lt;SequentialStringPlayer&gt; <span class="hljs-title">sstree</span><span class="hljs-params">(ssplayer,va.m)</span></span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=va.n; i++)&#123;<span class="hljs-comment">//依次从磁盘中取出元素，放入顺串生成树</span><br><br>        <span class="hljs-keyword">if</span>(!(fin1&gt;&gt;num)) num=INT_MIN;<br>        <span class="hljs-keyword">else</span> va.visitDiskTime++;<br><br>        SequentialStringPlayer tempwinner=ssplayer[sstree.getTheWinner()];<br>        SequentialStringPlayer tempnum; tempnum.key=num;<br><br>        <span class="hljs-keyword">if</span>(num &gt;= tempwinner.key) tempnum.id=tempwinner.id;<br>        <span class="hljs-keyword">else</span> tempnum.id=num=(num==INT_MIN) ? INT_MAX :tempwinner.id+<span class="hljs-number">1</span>;<br><br>        sstree.rePlay(sstree.getTheWinner(),tempnum);<br><br>        <span class="hljs-built_in">string</span> smallfile=va.path+<span class="hljs-string">&quot;smallfile&quot;</span>+to_string(tempwinner.id)+<span class="hljs-string">&quot;.txt&quot;</span>;<br>        va.numberOfDisk=max(va.numberOfDisk,tempwinner.id);<br>        <span class="hljs-function">ofstream <span class="hljs-title">fout2</span><span class="hljs-params">(smallfile, ios::app)</span></span>;<br>        fout2&lt;&lt;tempwinner.key&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><br>        fout2.close();<br>        va.visitDiskTime++;<br>    &#125;<br>    fin1.close();<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;顺串分配完毕，生成&quot;</span>&lt;&lt;va.numberOfDisk&lt;&lt;<span class="hljs-string">&quot;个顺串，顺串文件见您当前路径下出现的新文件&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">if</span>(va.ch1==<span class="hljs-string">&#x27;y&#x27;</span>)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;我们将这些数据在这里显示如下：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=va.numberOfDisk; i++)<br>        &#123;<br>            <span class="hljs-built_in">string</span> smallfile=va.path+<span class="hljs-string">&quot;smallfile&quot;</span>+to_string(i)+<span class="hljs-string">&quot;.txt&quot;</span>;<br>            <span class="hljs-function">ifstream <span class="hljs-title">finx</span><span class="hljs-params">(smallfile)</span></span>;<br>            <span class="hljs-keyword">int</span> tempx=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;smallfile&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;.txt: &quot;</span>;<br>            <span class="hljs-keyword">while</span>(finx&gt;&gt;tempx)<br>                <span class="hljs-built_in">cout</span>&lt;&lt;tempx&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            finx.close();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateTheFinalResult</span><span class="hljs-params">(Variable &amp;va)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-string">&quot;请问是否将最终排序结果放入原文件，如果否，则程序将新建一个Disk2.txt文件并放入此文件中（输入&#x27;y&#x27;或&#x27;n&#x27;代表&#x27;是&#x27;与&#x27;否&#x27;)：&quot;</span>; <span class="hljs-built_in">cin</span>&gt;&gt;va.ch;<br>    <span class="hljs-built_in">string</span> newFile;<br>    <span class="hljs-keyword">if</span>(va.ch==<span class="hljs-string">&#x27;y&#x27;</span>) newFile=va.file;<br>    <span class="hljs-keyword">else</span> newFile=va.path+<span class="hljs-string">&quot;Disk2.txt&quot;</span>;<br><br>    <span class="hljs-function">ofstream <span class="hljs-title">fout3</span><span class="hljs-params">(newFile)</span></span>;<br><br>    <span class="hljs-keyword">if</span>(va.numberOfDisk==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//只生成了一个顺串文件，直接将其加入目标文件</span><br>        <span class="hljs-built_in">string</span> smallfile=va.path+<span class="hljs-string">&quot;smallfile&quot;</span>+to_string(<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;.txt&quot;</span>;<br>        <span class="hljs-function">ifstream <span class="hljs-title">fin4</span><span class="hljs-params">(smallfile)</span></span>;<br>        <span class="hljs-keyword">int</span> tempnumber;<br>        <span class="hljs-keyword">while</span>(fin4&gt;&gt;tempnumber)&#123;<br>            fout3&lt;&lt;tempnumber&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            va.visitDiskTime+=<span class="hljs-number">2</span>;<br>        &#125;<br>        fout3.close();<br>        fin4.close();<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;由于只生成了1个顺串，直接将此结果放入目标文件中，磁盘访存次数为&quot;</span>&lt;&lt;va.visitDiskTime&lt;&lt;<span class="hljs-string">&quot;次，原因是每个数据都读写4次&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">if</span>(va.ch1==<span class="hljs-string">&#x27;y&#x27;</span>)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;最终外排序结果如下：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-function">ifstream <span class="hljs-title">finy</span><span class="hljs-params">(newFile)</span></span>;<br>            <span class="hljs-keyword">int</span> tempy;<br>            <span class="hljs-keyword">while</span>(finy&gt;&gt;tempy)<br>                <span class="hljs-built_in">cout</span>&lt;&lt;tempy&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            finy.close();<br>        &#125;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> dplayer[va.numberOfDisk+<span class="hljs-number">10</span>];<span class="hljs-comment">//初始化队列</span><br>    <span class="hljs-keyword">int</span> pointer[va.numberOfDisk+<span class="hljs-number">10</span>];<span class="hljs-comment">//各个小磁盘文件的指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=va.numberOfDisk; i++)&#123;<br>        <span class="hljs-built_in">string</span> smallfile=va.path+<span class="hljs-string">&quot;smallfile&quot;</span>+to_string(i)+<span class="hljs-string">&quot;.txt&quot;</span>;<br>        <span class="hljs-function">ifstream <span class="hljs-title">fin2</span><span class="hljs-params">(smallfile)</span></span>;<br>        fin2&gt;&gt;dplayer[i];<br>        pointer[i]=fin2.tellg();<br>        fin2.close();<br>    &#125;<br>    <span class="hljs-function">MinimumLoserTree&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">dtree</span><span class="hljs-params">(dplayer,va.numberOfDisk)</span></span>;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(cnt&lt;va.n)&#123;<br>        cnt++;<br>        <span class="hljs-keyword">int</span> temp=dtree.getTheWinner();<br>        <span class="hljs-keyword">int</span> tempwinner=dplayer[temp];<br>        fout3&lt;&lt;tempwinner&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        va.visitDiskTime++;<br>        <span class="hljs-built_in">string</span> smallfile=va.path+<span class="hljs-string">&quot;smallfile&quot;</span>+to_string(temp)+<span class="hljs-string">&quot;.txt&quot;</span>;<br>        <span class="hljs-function">ifstream <span class="hljs-title">fin3</span><span class="hljs-params">(smallfile)</span></span>;<br>        fin3.clear(); fin3.seekg(pointer[temp]+<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">int</span> tempnum;<br>        <span class="hljs-keyword">if</span>(pointer[temp]+<span class="hljs-number">1</span>==<span class="hljs-number">0</span>) tempnum=INT_MAX;<br>        <span class="hljs-keyword">else</span> &#123;<br>            fin3&gt;&gt;tempnum;<br>            pointer[temp]=fin3.tellg();<br>            <span class="hljs-keyword">if</span>(pointer[temp]+<span class="hljs-number">1</span>==<span class="hljs-number">0</span>) tempnum=INT_MAX;<br>        &#125;<br>        va.visitDiskTime++;<br>        dtree.rePlay(temp,tempnum);<br>        fin3.close();<br>    &#125;<br>    fout3.close();<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;将这些文件进行&quot;</span>&lt;&lt;va.numberOfDisk&lt;&lt;<span class="hljs-string">&quot;路归并，已经结果存入到目标文件中。磁盘访存次数为&quot;</span>&lt;&lt;va.visitDiskTime&lt;&lt;<span class="hljs-string">&quot;次，原因是每个数据都读写4次&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">if</span>(va.ch1==<span class="hljs-string">&#x27;y&#x27;</span>)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;最终外排序结果如下：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-function">ifstream <span class="hljs-title">finy</span><span class="hljs-params">(newFile)</span></span>;<br>        <span class="hljs-keyword">int</span> tempy;<br>        <span class="hljs-keyword">while</span>(finy&gt;&gt;tempy)<br>            <span class="hljs-built_in">cout</span>&lt;&lt;tempy&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        finy.close();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    srand(time(<span class="hljs-literal">nullptr</span>));<br>    Variable va;<br><br>    init(va);<span class="hljs-comment">//初始化，生成随机磁盘文件</span><br><br>    SequentialStringPlayer ssplayer[va.n+<span class="hljs-number">10</span>];<br><br>    SequentialStringConstruction(va,ssplayer);<span class="hljs-comment">//构造顺串</span><br><br>    GenerateTheFinalResult(va);<span class="hljs-comment">//生成最终结果</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br><br></code></pre></td></tr></table></figure><p>代码参考教材源码以及<a href="https://blog.csdn.net/Jeff_Winger/article/details/81459666">这篇博客</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLion找不到头文件解决方案</title>
    <link href="/2021/01/14/CLion%E6%89%BE%E4%B8%8D%E5%88%B0%E5%A4%B4%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/01/14/CLion%E6%89%BE%E4%B8%8D%E5%88%B0%E5%A4%B4%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>这两天我的air换了硬盘，使用时间机器恢复，出现五国问题，被迫重装系统，结果发现CLion找不到头文件了，所有的头文件下面都有红色波浪形标错，找了两种方法，我在下面列一下：</p><ol><li><p>终端加入这一行代码，安装命令行编译器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">xcode-select --install<br></code></pre></td></tr></table></figure><p>这个方法应该是适用于mac系统升级后出现的问题，我没有成功。</p></li><li><p>在 CMakeList.txt 里添加一行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">include_directories(SYSTEM <span class="hljs-string">&quot;/foo/bar&quot;</span>)<br></code></pre></td></tr></table></figure><p>之后右上角出现Reload changes和 Enable Auto-Reload，选择第二个，保存之后将这行注释掉即可。我是使用这个方法成功的。这个方法是添加头文件目录，它相当于g++选项中的-I参数的作用，也相当于环境变量中增加路径到CPLUS_INCLUDE_PATH变量的作用。</p></li></ol><p>更新：我突然发现一个特别好的链接！<a href="https://blog.csdn.net/superSmart_Dong/article/details/98982679">https://blog.csdn.net/superSmart_Dong/article/details/98982679</a></p><p>参考博客：</p><p><a href="https://blog.csdn.net/chenjun15/article/details/89305462">https://blog.csdn.net/chenjun15/article/details/89305462</a><br><a href="https://segmentfault.com/a/1190000018045211?utm_source=tag-newest">https://segmentfault.com/a/1190000018045211?utm_source=tag-newest</a><br><a href="https://www.cnblogs.com/binbinjx/p/5626916.html">https://www.cnblogs.com/binbinjx/p/5626916.html</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CLion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/13/hello-world/"/>
    <url>/2021/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
